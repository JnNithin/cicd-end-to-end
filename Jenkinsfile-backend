//import library
@Library('shared-lib@main') _


pipeline {
    agent any



    stages {
        stage('CheckOut') {
            steps {
                withCredentials([string(credentialsId: 'gitId', variable: 'GITHUB_TOKEN')]) {
                    // Your git step here, and you can use $GITHUB_TOKEN in the Git URL
                    git url: 'https://livevil8:${GITHUB_TOKEN}@github.com/livevil8/cicd-end-to-end.git', branch: 'main'
                }
            }
        }
        stage('Terraform Init') {
            steps {
            script {
                def tfInitOutput = sh(script: 'cd backend-state && terraform init', returnStdout: true).trim()
                echo "Terraform Init Output: ${tfInitOutput}"
                }
            }
        }

        stage('Plan') {
            steps {
                script {
                    // Define the directory where Terraform files are located
                    def terraformDirectory = 'backend-state'

                    // Execute Terraform plan
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: '6466376b-9ed7-498e-92cb-9f21eb3aa540', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                        def awsAccessKey = env.AWS_ACCESS_KEY_ID
                        def awsSecretKey = env.AWS_SECRET_ACCESS_KEY
                        
                        // Set AWS credentials as environment variables for Terraform
                        withEnv(["AWS_ACCESS_KEY_ID=${awsAccessKey}", "AWS_SECRET_ACCESS_KEY=${awsSecretKey}"]) {
                            sh "cd ${terraformDirectory} && terraform plan -out=backend-planFile.tfplan"
                        }
                    }
                }
            }
        }

        stage('ApplyOrDestroy') {
            steps {
                script {
                    def terraformAction = params.ACTION
                    def terraformDirectory = 'backend-state'
                    try {
                        // Use tfplan file based on the selected action
                        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: '6466376b-9ed7-498e-92cb-9f21eb3aa540', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                            if (terraformAction == 'apply') {
                                withEnv(["AWS_ACCESS_KEY_ID=${env.AWS_ACCESS_KEY_ID}", "AWS_SECRET_ACCESS_KEY=${env.AWS_SECRET_ACCESS_KEY}"]) {
                                    sh "cd ${terraformDirectory} && terraform apply backend-planFile.tfplan --auto-approve"
                                }
                            } else if (terraformAction == 'destroy') {
                                withEnv(["AWS_ACCESS_KEY_ID=${env.AWS_ACCESS_KEY_ID}", "AWS_SECRET_ACCESS_KEY=${env.AWS_SECRET_ACCESS_KEY}"]) {
                                    sh "cd ${terraformDirectory} && terraform destroy backend-planFile.tfplan --auto-approve"
                                }
                            }
                        }
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE' // Set the build result to FAILURE on error
                        error "Terraform apply/destroy failed: ${e.message}"
                    }
                }
            }
        }
    }
post {
    success {
        script {
            // Store artifacts with dynamic names
            def buildNumber = currentBuild.getNumber()
            def currentDate = new Date().format('yyyyMMdd-HHmmss')
            def artifactsPath = "Artifacts/backend-artifacts"

             // Copy the existing .tfplan file to the Artifacts directory with a new name
            sh "cp backend-state/backend-planFile.tfplan ${artifactsPath}/backend-planFile_${buildNumber}_${currentDate}.tfplan"

            // Archive artifacts
            archiveArtifacts artifacts: "${artifactsPath}/**", fingerprint: true
        }
    }
}

}