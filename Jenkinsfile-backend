//import library
@Library('shared-lib@main') _


pipeline {
    agent any



    stages {
        stage('CheckOut') {
            steps {
                withCredentials([string(credentialsId: 'bbc69362-59e8-44be-95c6-39f5109027cf', variable: 'GITHUB_TOKEN')]) {
                    // Your git step here, and you can use $GITHUB_TOKEN in the Git URL
                    git url: 'https://livevil8:${GITHUB_TOKEN}@github.com/livevil8/cicd-end-to-end.git', branch: 'main'
                }
            }
        }
        stage('Terraform Init') {
            steps {
            script {
                def tfInitOutput = sh(script: 'cd backend-state && terraform init', returnStdout: true).trim()
                echo "Terraform Init Output: ${tfInitOutput}"
                }
            }
        }

        stage('Plan') {
            steps {
                script {
                    // Define the directory where Terraform files are located
                    def terraformDirectory = 'backend-state'

                    // Execute Terraform plan
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: '6466376b-9ed7-498e-92cb-9f21eb3aa540', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                        sh "cd ${terraformDirectory} && terraform plan -out=backend-planFile.tfplan"
                    }
                }
            }
        }
        stage('ApplyOrDestroy') {
            steps {
                script {
                    def terraformAction = params.ACTION
                    def terraformDirectory = 'backend-state'
                    try {
                        // Use tfplan file based on the selected action
                        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: '6466376b-9ed7-498e-92cb-9f21eb3aa540', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                            if (terraformAction == 'apply') {
                                sh "cd ${terraformDirectory} && terraform apply backend-planFile.tfplan --auto-approve"
                            } else if (terraformAction == 'destroy') {
                                sh "cd ${terraformDirectory} && terraform destroy backend-planFile.tfplan --auto-approve"
                            }
                        }
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE' // Set the build result to FAILURE on error
                        error "Terraform apply/destroy failed: ${e.message}"
                    }
                }
            }
        }
        stage('Trigger Jenkins-Worker Pipeline') {
            steps {
                script {
                    if (currentBuild.result == 'SUCCESS') {
                        // Only trigger the worker pipeline if the previous stages were successful
                        build job: 'Jenkinsfile-workerNode', propagate: false, wait: false
                    } else {
                        echo "Skipping worker pipeline trigger due to previous failures."
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                // Store artifacts with dynamic names
                def buildNumber = currentBuild.getNumber()
                def currentDate = new Date().format('yyyyMMdd-HHmmss')
                def artifactsPath = "artifacts/backend-artifacts/${buildNumber}_${currentDate}"

                // Archive artifacts
                archiveArtifacts artifacts: "Artifacts/backend-artifacts/**", fingerprint: true
            }
        }
    }
}
